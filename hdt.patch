Index: HD-Trailers.Net Downloader.suo
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: HD-Trailers.Net Downloader/bin/Release/HD-Trailers.Net Downloader.exe
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: HD-Trailers.Net Downloader/bin/Release/HD-Trailers.Net Downloader.exe.config
===================================================================
--- HD-Trailers.Net Downloader/bin/Release/HD-Trailers.Net Downloader.exe.config	(revision 63412)
+++ HD-Trailers.Net Downloader/bin/Release/HD-Trailers.Net Downloader.exe.config	(working copy)
@@ -16,12 +16,20 @@
     <add key="CreateFolder" value="false" />
     <!--Set to True to download available posters-->
     <add key="GrabPoster" value="true" />
+    <!--Set to True to save files with XBMC -trailer appended-->
+    <add key="XBMCFileNames" value="true" />
+    <!--Set to True to create an XBMC style movie Nfo file. This is accomplished by doing a lookup on IMDB-->
+    <add key="CreateXBMCNfoFile" value="true" />
     <!--Delete files/Directories older than X days. Set to 0 to disable and keep all-->
     <add key="KeepFor" value="30" />
     <!--only interested in trailers, not in special features or inside looks-->
     <add key="TrailersOnly" value = "true"/>
-    <!--only interested in trailers, srcitly "Trailers"-->
+    <!--only interested in trailers, strictly "Trailers"-->
     <add key="StrictTrailersOnly" value = "true"/>
+    <!--only download trailers for specific movie Genres (all, drama, comedy, action, etc)-->
+    <add key="IncludedGenres" value="Comedy / Drama" />
+    <!--exclude trailers for specific movie Genres (all, drama, comedy, action, etc)-->
+    <add key="ExcludeGenres" value="None" />
     <!-- define minimum file size (in bytes), avoid content from sites not willing to stream to unknown clients -->
     <add key="MinTrailerSize" value = "100000"/>
     <!--Set to True to add successful downloads to exclusions file and to prevent re-downloading any found in the file-->
Index: HD-Trailers.Net Downloader/bin/Release/HD-Trailers.Net Downloader.pdb
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: HD-Trailers.Net Downloader/Config.cs
===================================================================
--- HD-Trailers.Net Downloader/Config.cs	(revision 63412)
+++ HD-Trailers.Net Downloader/Config.cs	(working copy)
@@ -4,7 +4,11 @@
 using System.Globalization;
 using System.Text;
 using System.Configuration;
+using System.IO;
+using System.Linq;
+using System.Xml.Linq;
 
+
 namespace HDTrailersNETDownloader
 {
     class Config
@@ -20,9 +24,12 @@
         public int KeepFor { get; private set; }
         public bool GrabPoster { get; private set; }
         public bool XBMCFilenames { get; private set; }
+        public bool CreateXBMCNfoFile { get; private set; }
         public bool UseExclusions { get; private set; }
         public bool TrailersOnly { get; private set; }
         public bool StrictTrailersOnly { get; private set; }
+        public string IncludeGenres { get; private set; }
+        public string ExcludeGenres { get; private set; }
         public int MinTrailerSize { get; private set; }
         public bool EmailSummary { get; private set; }
         public string EmailAddress { get; private set; }
@@ -37,37 +44,43 @@
         public bool RunOnlyWhenNewTrailers { get; private set; }
         public string Executable { get; private set; }
         public string EXEArguements { get; private set; }
-
-
+        protected string temp;
         public Config()
         {
             this.PhysicalLog = false;
         }
 
         // return a string from a NameValue
-        private string GetStringFromAppsettings(NameValueCollection coll, string name, string def)
+        private string GetStringFromAppsettings(XElement coll, string name, string def)
         {
-            string ret = coll[name];
-            if (ret == null)
+            String value;
+            value = (from c in coll.Elements("appSettings").Elements("add")
+                     where (string)c.Attribute("key").Value == name
+                     select new
+                     {
+                         configValue = (string)c.Attribute("value").Value
+
+                     }).Select(c => c.configValue).FirstOrDefault<String>();
+            if (value == null)
                 return def;
-            return ret;
+            return value;
         }
 
         // return a bool from a NameValue
-        private Boolean GetBooleanFromAppsettings(NameValueCollection coll, string name, string def)
+        private Boolean GetBooleanFromAppsettings(XElement coll, string name, string def)
         {
             string ret = GetStringFromAppsettings(coll, name, def);
             return Convert.ToBoolean(ret, CultureInfo.InvariantCulture);
         }
 
         // return a bool from a NameValue
-        private Int32 GetInt32FromAppsettings(NameValueCollection coll, string name, string def)
+        private Int32 GetInt32FromAppsettings(XElement coll, string name, string def)
         {
             string ret = GetStringFromAppsettings(coll, name, def);
             return Convert.ToInt32(ret, CultureInfo.InvariantCulture);
         }
 
-        private string[] GetStringArrayFromAppsettings(NameValueCollection coll, string name, string def)
+        private string[] GetStringArrayFromAppsettings(XElement coll, string name, string def)
         {
             string[] ret;
             string res = GetStringFromAppsettings(coll, name, def);
@@ -80,19 +93,44 @@
 
             return ret;
         }
-
         public void Init()
         {
             //Load our config
             // Get the AppSettings section.
-            NameValueCollection appSetting = ConfigurationManager.AppSettings;
+            Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
+            NameValueCollection origappSetting = ConfigurationManager.AppSettings;
 
-            this.QualityPreference = GetStringArrayFromAppsettings(appSetting, "QualityPreference", "720p,480p");
+            temp = System.Environment.GetFolderPath(System.Environment.SpecialFolder.CommonApplicationData);
+            string localAppData;
+            localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
+            string userFilePath = Path.Combine(localAppData, "HD-Trailers.Net Downloader");
+
+            if (!Directory.Exists(userFilePath)) {
+                Directory.CreateDirectory(userFilePath);
+            }
+            if (!File.Exists(Path.Combine(userFilePath, "HD-Trailers.Net Downloader.config")))
+            {
+                if (File.Exists(config.FilePath)) {
+                    File.Copy(config.FilePath, Path.Combine(userFilePath, "HD-Trailers.Net Downloader.config"));
+                    Environment.Exit(0);
+                }
+            }
+
+            //TextWriter tw = new StreamWriter(Path.Combine(userFilePath, "HD-Trailers.Net Downloader.CMD"));
+            // write a line of text to the file
+            //tw.WriteLine(Path.Combine(temp, "HD-Trailers.Net Downloader.exe"));
+            // close the stream
+            //tw.Close();
+
+            XElement appSetting = System.Xml.Linq.XElement.Load(Path.Combine(userFilePath, "HD-Trailers.Net Downloader.config"));
+
+             this.QualityPreference = GetStringArrayFromAppsettings(appSetting, "QualityPreference", "720p,480p");
             this.SitesToSkip = GetStringArrayFromAppsettings(appSetting, "SitesToSkip", "");
             this.TrailerDownloadFolder = GetStringFromAppsettings(appSetting, "TrailerDownloadFolder", "c:\\Trailers").TrimEnd('\\');
             this.MetadataDownloadFolder = GetStringFromAppsettings(appSetting, "MetadataDownloadFolder", "c:\\Trailers").TrimEnd('\\');
             this.GrabPoster = GetBooleanFromAppsettings(appSetting, "GrabPoster", "true");
-            this.XBMCFilenames = GetBooleanFromAppsettings(appSetting, "XBMCFilenames", "false");
+            this.XBMCFilenames = GetBooleanFromAppsettings(appSetting, "XBMCFileNames", "false");
+            this.CreateXBMCNfoFile = GetBooleanFromAppsettings(appSetting, "CreateXBMCNfoFile", "true");
             this.CreateFolder = GetBooleanFromAppsettings(appSetting, "CreateFolder", "true");
             this.VerboseLogging = GetBooleanFromAppsettings(appSetting, "VerboseLogging", "true");
             this.PhysicalLog = GetBooleanFromAppsettings(appSetting, "PhysicalLog", "true");
@@ -101,7 +139,9 @@
             this.MinTrailerSize = GetInt32FromAppsettings(appSetting, "MinTrailerSize", "100000");
             this.UseExclusions = GetBooleanFromAppsettings(appSetting, "UseExclusions", "true");
             this.TrailersOnly = GetBooleanFromAppsettings(appSetting, "TrailersOnly", "true");
-            this.StrictTrailersOnly = GetBooleanFromAppsettings(appSetting, "StrictTrailersOnly", "true");
+            this.StrictTrailersOnly = GetBooleanFromAppsettings(appSetting, "StrictTrailersOnly", "False");
+            this.IncludeGenres = GetStringFromAppsettings(appSetting, "DownloadSpecifiedGenresOnly", "all");
+            this.ExcludeGenres = GetStringFromAppsettings(appSetting, "DownloadSpecifiedGenresOnly", "none");
             this.EmailSummary = GetBooleanFromAppsettings(appSetting, "EmailSummary", "false");
             this.EmailAddress = GetStringFromAppsettings(appSetting, "EmailAddress", "");
             this.SMTPServer = GetStringFromAppsettings(appSetting, "SMTPServer", "");
Index: HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj
===================================================================
--- HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj	(revision 63412)
+++ HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj	(working copy)
@@ -16,19 +16,22 @@
     </FileUpgradeFlags>
     <OldToolsVersion>3.5</OldToolsVersion>
     <UpgradeBackupLocation />
-    <IsWebBootstrapper>false</IsWebBootstrapper>
+    <IsWebBootstrapper>true</IsWebBootstrapper>
     <PublishUrl>publish\</PublishUrl>
     <Install>true</Install>
-    <InstallFrom>Disk</InstallFrom>
-    <UpdateEnabled>false</UpdateEnabled>
+    <InstallFrom>Web</InstallFrom>
+    <UpdateEnabled>true</UpdateEnabled>
     <UpdateMode>Foreground</UpdateMode>
     <UpdateInterval>7</UpdateInterval>
     <UpdateIntervalUnits>Days</UpdateIntervalUnits>
     <UpdatePeriodically>false</UpdatePeriodically>
     <UpdateRequired>false</UpdateRequired>
     <MapFileExtensions>true</MapFileExtensions>
+    <InstallUrl>http://hdtrailersdler.codeplex.com/releases/clickonce/</InstallUrl>
+    <CreateWebPageOnPublish>true</CreateWebPageOnPublish>
+    <WebPage>publish.htm</WebPage>
     <DisallowUrlActivation>true</DisallowUrlActivation>
-    <ApplicationRevision>4</ApplicationRevision>
+    <ApplicationRevision>15</ApplicationRevision>
     <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
     <UseApplicationTrust>false</UseApplicationTrust>
     <CreateDesktopShortcut>true</CreateDesktopShortcut>
@@ -64,6 +67,12 @@
   <PropertyGroup>
     <SignManifests>true</SignManifests>
   </PropertyGroup>
+  <PropertyGroup>
+    <ApplicationManifest>Properties\app.manifest</ApplicationManifest>
+  </PropertyGroup>
+  <PropertyGroup>
+    <TargetZone>LocalIntranet</TargetZone>
+  </PropertyGroup>
   <ItemGroup>
     <Reference Include="PreEmptive.Attributes">
       <HintPath>Properties\PreEmptive.Attributes.dll</HintPath>
@@ -72,11 +81,17 @@
       <SpecificVersion>False</SpecificVersion>
       <HintPath>\\NAS\brian-laptop\Visual Studio Projects\Temp\RssReader_src\RssReader\bin\Release\RssReader.dll</HintPath>
     </Reference>
+    <Reference Include="SimpleConfigEditor, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
+      <SpecificVersion>False</SpecificVersion>
+      <HintPath>bin\Release\SimpleConfigEditor.dll</HintPath>
+    </Reference>
     <Reference Include="System" />
     <Reference Include="System.configuration" />
     <Reference Include="System.Core">
       <RequiredTargetFramework>3.5</RequiredTargetFramework>
     </Reference>
+    <Reference Include="System.Web" />
+    <Reference Include="System.Windows.Forms" />
     <Reference Include="System.Xml.Linq">
       <RequiredTargetFramework>3.5</RequiredTargetFramework>
     </Reference>
@@ -87,17 +102,22 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Class1.cs" />
+    <Compile Include="Class2.cs" />
+    <Compile Include="Class3.cs" />
+    <Compile Include="Class4.cs" />
     <Compile Include="Config.cs" />
     <Compile Include="Logging.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <ItemGroup>
-    <None Include="HD-Trailers.Net Downloader.exe.config">
+    <Content Include="HD-Trailers.Net Downloader.exe.config">
       <CopyToOutputDirectory>Always</CopyToOutputDirectory>
       <SubType>Designer</SubType>
-    </None>
+    </Content>
     <None Include="HD-Trailers.Net Downloader_TemporaryKey.pfx" />
+    <None Include="Properties\app.manifest" />
   </ItemGroup>
   <ItemGroup>
     <BootstrapperPackage Include=".NETFramework,Version=v4.0">
Index: HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj.user
===================================================================
--- HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj.user	(revision 63412)
+++ HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.csproj.user	(working copy)
@@ -2,7 +2,7 @@
 <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <PropertyGroup>
     <PublishUrlHistory>publish\</PublishUrlHistory>
-    <InstallUrlHistory />
+    <InstallUrlHistory>http://hdtrailersdler.codeplex.com/releases/clickonce/</InstallUrlHistory>
     <SupportUrlHistory />
     <UpdateUrlHistory />
     <BootstrapperUrlHistory />
Index: HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.exe.config
===================================================================
--- HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.exe.config	(revision 63412)
+++ HD-Trailers.Net Downloader/HD-Trailers.Net Downloader.exe.config	(working copy)
@@ -16,12 +16,20 @@
     <add key="CreateFolder" value="false" />
     <!--Set to True to download available posters-->
     <add key="GrabPoster" value="true" />
+    <!--Set to True to save files with XBMC -trailer appended-->
+    <add key="XBMCFileNames" value="true" />
+    <!--Set to True to create an XBMC style movie Nfo file. This is accomplished by doing a lookup on IMDB-->
+    <add key="CreateXBMCNfoFile" value="true" />
     <!--Delete files/Directories older than X days. Set to 0 to disable and keep all-->
     <add key="KeepFor" value="30" />
     <!--only interested in trailers, not in special features or inside looks-->
     <add key="TrailersOnly" value = "true"/>
-    <!--only interested in trailers, srcitly "Trailers"-->
+    <!--only interested in trailers, strictly "Trailers"-->
     <add key="StrictTrailersOnly" value = "true"/>
+    <!--only download trailers for specific movie Genres (all, drama, comedy, action, etc)-->
+    <add key="IncludedGenres" value="Comedy / Drama" />
+    <!--exclude trailers for specific movie Genres (all, drama, comedy, action, etc)-->
+    <add key="ExcludeGenres" value="None" />
     <!-- define minimum file size (in bytes), avoid content from sites not willing to stream to unknown clients -->
     <add key="MinTrailerSize" value = "100000"/>
     <!--Set to True to add successful downloads to exclusions file and to prevent re-downloading any found in the file-->
Index: HD-Trailers.Net Downloader/Logging.cs
===================================================================
--- HD-Trailers.Net Downloader/Logging.cs	(revision 63412)
+++ HD-Trailers.Net Downloader/Logging.cs	(working copy)
@@ -3,6 +3,7 @@
 using System.IO;
 using System.Text;
 
+
 namespace HDTrailersNETDownloader
 {
     class Logging
Index: HD-Trailers.Net Downloader/obj/Release/HD-Trailers.Net Downloader.csproj.FileListAbsolute.txt
===================================================================
--- HD-Trailers.Net Downloader/obj/Release/HD-Trailers.Net Downloader.csproj.FileListAbsolute.txt	(revision 63412)
+++ HD-Trailers.Net Downloader/obj/Release/HD-Trailers.Net Downloader.csproj.FileListAbsolute.txt	(working copy)
@@ -43,3 +43,4 @@
 G:\HD-Trailers.Net Downloader Source\hdtrailersdler\HD-Trailers.Net Downloader\bin\Release\HD-Trailers.Net Downloader.application
 G:\HD-Trailers.Net Downloader Source\hdtrailersdler\HD-Trailers.Net Downloader\obj\Release\HD-Trailers.Net Downloader.exe.manifest
 G:\HD-Trailers.Net Downloader Source\hdtrailersdler\HD-Trailers.Net Downloader\obj\Release\HD-Trailers.Net Downloader.application
+G:\HD-Trailers.Net Downloader Source\hdtrailersdler\HD-Trailers.Net Downloader\obj\Release\HD-Trailers.Net Downloader.TrustInfo.xml
Index: HD-Trailers.Net Downloader/obj/Release/HD-Trailers.Net Downloader.exe
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: HD-Trailers.Net Downloader/obj/Release/HD-Trailers.Net Downloader.pdb
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: HD-Trailers.Net Downloader/Program.cs
===================================================================
--- HD-Trailers.Net Downloader/Program.cs	(revision 63412)
+++ HD-Trailers.Net Downloader/Program.cs	(working copy)
@@ -10,8 +10,10 @@
 using System.Net.Mail;
 using System.Globalization;
 using System.Diagnostics;
+using System.Text.RegularExpressions;
 
 
+
 namespace HDTrailersNETDownloader
 {
     class Program
@@ -19,6 +21,9 @@
         static Config config = new Config();
         static Logging log = new Logging();
         static ArrayList Exclusions = new ArrayList();
+        static IMDb imdb = new IMDb();
+        static NfoMovie NFOTrailer = new NfoMovie();
+        static NfoFile NFOTrailerFile = new NfoFile();
 
         static string pathsep = Path.DirectorySeparatorChar.ToString();
         static string MailBody;
@@ -41,18 +46,22 @@
                 log.WriteLine("HD Trailer Blog: http://www.hd-trailers.net");
                 log.WriteLine("");
 
+                log.WriteLine("CommonApplicateData: " + System.Environment.GetFolderPath(System.Environment.SpecialFolder.CommonApplicationData));
+                log.WriteLine("LocalApplicationData: " +  Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
+                log.WriteLine("LocalAppData: " + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "HD-Trailers.Net Downloader"));
+
                 if (!CheckConfigParameter())
                     return;
 
                 //Delete folders/files if needed
                 DeleteEm();
-
                 feedItems = GetFeedItems(config.FeedAddress);
                 log.VerboseWrite("RSS feed items (" + feedItems.Count.ToString() + ") from "+ config.FeedAddress +" grabbed successfully");
 
                 for (int i = 0; i < feedItems.Count; i++)
+                {
                     ProcessFeedItem(feedItems[i].Title, feedItems[i].Link);
-
+                }
                 //Do housekeeping like serializing exclusions and sending email summary
                 log.VerboseWrite("");
                 log.VerboseWrite("Housekeeping:");
@@ -250,6 +259,8 @@
             }
 
             string tempTrailerURL = GetPreferredURL(nvc, config.QualityPreference, ref qualPreference);
+            string fname = LegalFileName(title);
+            string dirName = ManageDirectory(fname);
 
             
             // Compare download url to sitestoskip item in config. If match detected, skip and log.
@@ -281,19 +292,33 @@
                 AddToEmailSummary(title + " (" + qualPreference + ") : Title not a trailer. Skipping...");
                 return;
             }
-            if ((config.StrictTrailersOnly) && (!title.Contains("(Trailer)")))
+            if((config.IncludeGenres.IndexOf("all", StringComparison.OrdinalIgnoreCase) >= 0) || (config.ExcludeGenres.IndexOf("none", StringComparison.OrdinalIgnoreCase) >= 0) || config.CreateXBMCNfoFile) {
+                Regex reg = new Regex("\\(([^)]*)\\)");
+                string MovieName = reg.Replace(fname, "");
+//                String MovieName = "The Pruitt-Igoe Myth";
+                MovieName.Trim();
+                imdb.ImdbLookup(MovieName);
+            }
+            if(!(config.IncludeGenres.IndexOf("all", StringComparison.OrdinalIgnoreCase) >= 0))
             {
-                log.WriteLine("Strict Trailers Only set. Skipping...");
-                AddToEmailSummary(title + " (" + qualPreference + ") : Strict Trailers Only set. Skipping...");
-                return;
+                if (!imdb.isGenre(config.IncludeGenres)) return; 
             }
+            if (!(config.ExcludeGenres.IndexOf("none", StringComparison.OrdinalIgnoreCase) >= 0))
+            {
+                if (imdb.isGenre(config.ExcludeGenres)) return;
+            }
 
+//            if ((config.StrictTrailersOnly) && !(title.Contains("(Theatrical Trailer)") || title.Contains("(Trailer)")))
+//            {
+//                log.WriteLine("Strict Trailers Only set. Skipping...");
+//                AddToEmailSummary(title + " (" + qualPreference + ") : Strict Trailers Only set. Skipping...");
+//                return;
+//            }
+
             bool tempBool;
             string posterUrl = nvc["poster"];
             bool tempDirectoryCreated = false;
 
-            string fname = LegalFileName(title);
-            string dirName = ManageDirectory(fname);
 
             log.VerboseWrite("Extracted download url (" + qualPreference + "): " + tempTrailerURL);
             log.VerboseWrite("Local directory: " + dirName);
@@ -303,8 +328,8 @@
                 Directory.CreateDirectory(dirName);
                 tempDirectoryCreated = true;
             }
+
             tempBool = GetOrResumeTrailer(tempTrailerURL, fname, dirName, qualPreference, posterUrl);
-
             //Delete the directory if it didn't download
             if (tempBool == false && tempDirectoryCreated == true)
                 Directory.Delete(dirName);
@@ -321,6 +346,29 @@
                 log.WriteLine(title + " (" + qualPreference + ") : Downloaded");
                 AddToEmailSummary(title + " (" + qualPreference + ") : Downloaded");
             }
+            if (tempBool && config.CreateXBMCNfoFile)
+            {
+                NfoMovie NFOTrailer = new NfoMovie();
+                NfoFile NFOTrailerFile = new NfoFile();
+                NFOTrailer.Title = imdb.Title;
+                NFOTrailer.Quality = qualPreference;
+                NFOTrailer.Rating = imdb.Rating;
+                NFOTrailer.Year = imdb.Year;
+                NFOTrailer.Top250 = imdb.Top250;
+                NFOTrailer.Votes = imdb.Votes;
+                NFOTrailer.Plot = imdb.Plot;
+                NFOTrailer.Tagline = imdb.Tagline;
+                NFOTrailer.Runtime = imdb.Runtime;
+                NFOTrailer.Mpaa = imdb.MpaaRating;
+                NFOTrailer.Id = imdb.Id;
+                NFOTrailer.Runtime = imdb.Runtime;
+                string[] strStrings = imdb.Genres.ToArray(typeof(string)) as string[];
+                string JoinedString = String.Join(" / ", strStrings);
+                NFOTrailer.Genre = JoinedString;
+                String NfoName = MakeFileName(".nfo", fname, dirName, qualPreference);
+                NFOTrailerFile.saveNfoMovie(NFOTrailer, dirName + pathsep + NfoName);
+            }
+
         }
 
         static RssItems GetFeedItems(string url)
@@ -458,16 +506,31 @@
             }
         }
 
-
+        static string BuildFileName(string fName, string dirName, string ext)
+        {
+            if ((!config.CreateFolder) && (config.AddDates))
+            {
+                fName = DateTime.Now.ToString("yyyy-MM-dd") + " " + fName;
+            }
+            if (config.XBMCFilenames)
+            {
+                fName = fName.Insert(fName.Length - 4, "-trailer");
+            }
+            string nfofilename = dirName + pathsep + fName;
+            return Path.ChangeExtension(nfofilename, ext);
+        }
         static string MakeFileName(string upperDownloadUrl, string fName, string dirName, string qualPref)
         {
             if (upperDownloadUrl.Contains(".WMV"))
                 fName = fName + "_" + qualPref + ".wmv";
             else if (upperDownloadUrl.Contains(".ZIP"))
                 fName = fName + "_" + qualPref + ".zip";
+            else if (upperDownloadUrl.Contains(".nfo"))
+                fName = fName + "_" + qualPref + ".nfo";
             else
                 fName = fName + "_" + qualPref + ".mov";
 
+
             DirectoryInfo di = new DirectoryInfo(dirName);
             FileInfo[] fi;
 
@@ -613,7 +676,7 @@
 
             //Assuming we downloaded the trailer OK and the config has been set to grab posters...
             if ( (tempBool) && (config.GrabPoster))
-                GetPoster(posterUrl, dirName);
+                GetPoster(posterUrl, dirName, fName);
 
             return tempBool;
         }
@@ -632,11 +695,13 @@
             return null;
         }
 
-        static void GetPoster(string source, string downloadPath)
+        static void GetPoster(string source, string downloadPath, string filename)
         {
             try
             {
-                string fname = downloadPath + pathsep +@"folder.jpg";
+//              String fname = BuildFileName(filename, downloadPath, "jpg");
+                string fname = downloadPath + pathsep + filename;
+                fname = Path.ChangeExtension(fname, "jpg");
 
                 if ((source == null) || (source.Length == 0))
                 {
